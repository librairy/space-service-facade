/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.space.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Stats extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Stats\",\"namespace\":\"org.librairy.service.space.facade.model\",\"fields\":[{\"name\":\"total\",\"type\":\"long\",\"default\":0},{\"name\":\"min\",\"type\":\"long\",\"default\":0},{\"name\":\"max\",\"type\":\"long\",\"default\":0},{\"name\":\"mean\",\"type\":\"double\",\"default\":0.0},{\"name\":\"median\",\"type\":\"double\",\"default\":0.0},{\"name\":\"mode\",\"type\":\"double\",\"default\":0.0},{\"name\":\"var\",\"type\":\"double\",\"default\":0.0},{\"name\":\"dev\",\"type\":\"double\",\"default\":0.0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private long total;
   private long min;
   private long max;
   private double mean;
   private double median;
   private double mode;
   private double var;
   private double dev;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Stats() {}

  /**
   * All-args constructor.
   */
  public Stats(java.lang.Long total, java.lang.Long min, java.lang.Long max, java.lang.Double mean, java.lang.Double median, java.lang.Double mode, java.lang.Double var, java.lang.Double dev) {
    this.total = total;
    this.min = min;
    this.max = max;
    this.mean = mean;
    this.median = median;
    this.mode = mode;
    this.var = var;
    this.dev = dev;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return total;
    case 1: return min;
    case 2: return max;
    case 3: return mean;
    case 4: return median;
    case 5: return mode;
    case 6: return var;
    case 7: return dev;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: total = (java.lang.Long)value$; break;
    case 1: min = (java.lang.Long)value$; break;
    case 2: max = (java.lang.Long)value$; break;
    case 3: mean = (java.lang.Double)value$; break;
    case 4: median = (java.lang.Double)value$; break;
    case 5: mode = (java.lang.Double)value$; break;
    case 6: var = (java.lang.Double)value$; break;
    case 7: dev = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'total' field.
   */
  public java.lang.Long getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Long value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'min' field.
   */
  public java.lang.Long getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(java.lang.Long value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   */
  public java.lang.Long getMax() {
    return max;
  }

  /**
   * Sets the value of the 'max' field.
   * @param value the value to set.
   */
  public void setMax(java.lang.Long value) {
    this.max = value;
  }

  /**
   * Gets the value of the 'mean' field.
   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * Sets the value of the 'mean' field.
   * @param value the value to set.
   */
  public void setMean(java.lang.Double value) {
    this.mean = value;
  }

  /**
   * Gets the value of the 'median' field.
   */
  public java.lang.Double getMedian() {
    return median;
  }

  /**
   * Sets the value of the 'median' field.
   * @param value the value to set.
   */
  public void setMedian(java.lang.Double value) {
    this.median = value;
  }

  /**
   * Gets the value of the 'mode' field.
   */
  public java.lang.Double getMode() {
    return mode;
  }

  /**
   * Sets the value of the 'mode' field.
   * @param value the value to set.
   */
  public void setMode(java.lang.Double value) {
    this.mode = value;
  }

  /**
   * Gets the value of the 'var' field.
   */
  public java.lang.Double getVar() {
    return var;
  }

  /**
   * Sets the value of the 'var' field.
   * @param value the value to set.
   */
  public void setVar(java.lang.Double value) {
    this.var = value;
  }

  /**
   * Gets the value of the 'dev' field.
   */
  public java.lang.Double getDev() {
    return dev;
  }

  /**
   * Sets the value of the 'dev' field.
   * @param value the value to set.
   */
  public void setDev(java.lang.Double value) {
    this.dev = value;
  }

  /** Creates a new Stats RecordBuilder */
  public static org.librairy.service.space.facade.model.Stats.Builder newBuilder() {
    return new org.librairy.service.space.facade.model.Stats.Builder();
  }
  
  /** Creates a new Stats RecordBuilder by copying an existing Builder */
  public static org.librairy.service.space.facade.model.Stats.Builder newBuilder(org.librairy.service.space.facade.model.Stats.Builder other) {
    return new org.librairy.service.space.facade.model.Stats.Builder(other);
  }
  
  /** Creates a new Stats RecordBuilder by copying an existing Stats instance */
  public static org.librairy.service.space.facade.model.Stats.Builder newBuilder(org.librairy.service.space.facade.model.Stats other) {
    return new org.librairy.service.space.facade.model.Stats.Builder(other);
  }
  
  /**
   * RecordBuilder for Stats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Stats>
    implements org.apache.avro.data.RecordBuilder<Stats> {

    private long total;
    private long min;
    private long max;
    private double mean;
    private double median;
    private double mode;
    private double var;
    private double dev;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.space.facade.model.Stats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.space.facade.model.Stats.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.min)) {
        this.min = data().deepCopy(fields()[1].schema(), other.min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.max)) {
        this.max = data().deepCopy(fields()[2].schema(), other.max);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mean)) {
        this.mean = data().deepCopy(fields()[3].schema(), other.mean);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.median)) {
        this.median = data().deepCopy(fields()[4].schema(), other.median);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mode)) {
        this.mode = data().deepCopy(fields()[5].schema(), other.mode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.var)) {
        this.var = data().deepCopy(fields()[6].schema(), other.var);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dev)) {
        this.dev = data().deepCopy(fields()[7].schema(), other.dev);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Stats instance */
    private Builder(org.librairy.service.space.facade.model.Stats other) {
            super(org.librairy.service.space.facade.model.Stats.SCHEMA$);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.min)) {
        this.min = data().deepCopy(fields()[1].schema(), other.min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.max)) {
        this.max = data().deepCopy(fields()[2].schema(), other.max);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mean)) {
        this.mean = data().deepCopy(fields()[3].schema(), other.mean);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.median)) {
        this.median = data().deepCopy(fields()[4].schema(), other.median);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mode)) {
        this.mode = data().deepCopy(fields()[5].schema(), other.mode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.var)) {
        this.var = data().deepCopy(fields()[6].schema(), other.var);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dev)) {
        this.dev = data().deepCopy(fields()[7].schema(), other.dev);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'total' field */
    public java.lang.Long getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public org.librairy.service.space.facade.model.Stats.Builder setTotal(long value) {
      validate(fields()[0], value);
      this.total = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'total' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearTotal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'min' field */
    public java.lang.Long getMin() {
      return min;
    }
    
    /** Sets the value of the 'min' field */
    public org.librairy.service.space.facade.model.Stats.Builder setMin(long value) {
      validate(fields()[1], value);
      this.min = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'min' field has been set */
    public boolean hasMin() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'min' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearMin() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'max' field */
    public java.lang.Long getMax() {
      return max;
    }
    
    /** Sets the value of the 'max' field */
    public org.librairy.service.space.facade.model.Stats.Builder setMax(long value) {
      validate(fields()[2], value);
      this.max = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'max' field has been set */
    public boolean hasMax() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'max' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearMax() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'mean' field */
    public java.lang.Double getMean() {
      return mean;
    }
    
    /** Sets the value of the 'mean' field */
    public org.librairy.service.space.facade.model.Stats.Builder setMean(double value) {
      validate(fields()[3], value);
      this.mean = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'mean' field has been set */
    public boolean hasMean() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'mean' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearMean() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'median' field */
    public java.lang.Double getMedian() {
      return median;
    }
    
    /** Sets the value of the 'median' field */
    public org.librairy.service.space.facade.model.Stats.Builder setMedian(double value) {
      validate(fields()[4], value);
      this.median = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'median' field has been set */
    public boolean hasMedian() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'median' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearMedian() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'mode' field */
    public java.lang.Double getMode() {
      return mode;
    }
    
    /** Sets the value of the 'mode' field */
    public org.librairy.service.space.facade.model.Stats.Builder setMode(double value) {
      validate(fields()[5], value);
      this.mode = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'mode' field has been set */
    public boolean hasMode() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'mode' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearMode() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'var' field */
    public java.lang.Double getVar() {
      return var;
    }
    
    /** Sets the value of the 'var' field */
    public org.librairy.service.space.facade.model.Stats.Builder setVar(double value) {
      validate(fields()[6], value);
      this.var = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'var' field has been set */
    public boolean hasVar() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'var' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearVar() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'dev' field */
    public java.lang.Double getDev() {
      return dev;
    }
    
    /** Sets the value of the 'dev' field */
    public org.librairy.service.space.facade.model.Stats.Builder setDev(double value) {
      validate(fields()[7], value);
      this.dev = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'dev' field has been set */
    public boolean hasDev() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'dev' field */
    public org.librairy.service.space.facade.model.Stats.Builder clearDev() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Stats build() {
      try {
        Stats record = new Stats();
        record.total = fieldSetFlags()[0] ? this.total : (java.lang.Long) defaultValue(fields()[0]);
        record.min = fieldSetFlags()[1] ? this.min : (java.lang.Long) defaultValue(fields()[1]);
        record.max = fieldSetFlags()[2] ? this.max : (java.lang.Long) defaultValue(fields()[2]);
        record.mean = fieldSetFlags()[3] ? this.mean : (java.lang.Double) defaultValue(fields()[3]);
        record.median = fieldSetFlags()[4] ? this.median : (java.lang.Double) defaultValue(fields()[4]);
        record.mode = fieldSetFlags()[5] ? this.mode : (java.lang.Double) defaultValue(fields()[5]);
        record.var = fieldSetFlags()[6] ? this.var : (java.lang.Double) defaultValue(fields()[6]);
        record.dev = fieldSetFlags()[7] ? this.dev : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
